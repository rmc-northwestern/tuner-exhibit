var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var Action = require('./actions');
var store_1 = require('./store');
var BrowserBody = (function (_super) {
    __extends(BrowserBody, _super);
    function BrowserBody(props) {
        _super.call(this, props);
    }
    BrowserBody.prototype.componentDidMount = function () {
        var webview = document.createElement('webview');
        webview.style.height = '100%';
        webview.style.width = '100%';
        var wrapper = React.findDOMNode(this.refs['wrapper']);
        wrapper.appendChild(webview);
        wrapper.open = function (url) {
            Action.openURL(url);
        };
        if (this.props.useragent) {
            webview.useragent = this.props.useragent;
        }
        if (this.props.httpreferrer) {
            webview.httpreferrer = this.props.httpreferrer;
        }
        Action.createInnerFrame(webview);
    };
    BrowserBody.prototype.render = function () {
        return (React.createElement("div", {"className": this.props.className, "ref": "wrapper"}));
    };
    BrowserBody.defaultProps = { className: "" };
    return BrowserBody;
})(React.Component);
exports.BrowserBody = BrowserBody;
var ExternalButton = (function (_super) {
    __extends(ExternalButton, _super);
    function ExternalButton(props) {
        _super.call(this, props);
    }
    ExternalButton.prototype.open = function () {
        if (!this.opener) {
            var shell = global.require('shell');
            if (shell) {
                this.opener = shell.openExternal;
            }
            else {
                this.opener = require('open');
            }
        }
        this.opener(store_1.default.getCurrentURL());
    };
    ExternalButton.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", {"className": this.props.className, "onClick": function () { return _this.open(); }}, this.props.children));
    };
    ExternalButton.defaultProps = { className: "" };
    return ExternalButton;
})(React.Component);
exports.ExternalButton = ExternalButton;
var CloseButton = (function (_super) {
    __extends(CloseButton, _super);
    function CloseButton(props) {
        _super.call(this, props);
    }
    CloseButton.prototype.render = function () {
        return (React.createElement("div", {"className": this.props.className, "onClick": this.props.onClick}, this.props.children));
    };
    CloseButton.defaultProps = { className: "" };
    return CloseButton;
})(React.Component);
exports.CloseButton = CloseButton;
var PageTitle = (function (_super) {
    __extends(PageTitle, _super);
    function PageTitle(props) {
        _super.call(this, props);
    }
    PageTitle.prototype.componentDidMount = function () {
        var _this = this;
        this.title_listener = function (title) {
            var node = React.findDOMNode(_this.refs['title']);
            node.innerText = title;
        };
        store_1.default.on('update-title', this.title_listener);
    };
    PageTitle.prototype.componentWillUnmount = function () {
        if (this.title_listener) {
            store_1.default.removeListener('update-title', this.title_listener);
        }
    };
    PageTitle.prototype.render = function () {
        return (React.createElement("div", {"className": this.props.className, "ref": "title"}));
    };
    PageTitle.defaultProps = { className: "" };
    return PageTitle;
})(React.Component);
exports.PageTitle = PageTitle;
var ForwardButton = (function (_super) {
    __extends(ForwardButton, _super);
    function ForwardButton(props) {
        _super.call(this, props);
        this.state = { enabled: false };
    }
    ForwardButton.prototype.componentDidMount = function () {
        var _this = this;
        this.forwardable_listener = function (forwardable) { return _this.setState({ enabled: forwardable }); };
        store_1.default.on('update-forwardable', this.forwardable_listener);
    };
    ForwardButton.prototype.componentWillUnmount = function () {
        if (this.forwardable_listener) {
            store_1.default.removeListener('update-forwardable', this.forwardable_listener);
        }
    };
    ForwardButton.prototype.getClassName = function () {
        if (this.state.enabled) {
            return this.props.className;
        }
        else {
            return this.props.className + " disabled";
        }
    };
    ForwardButton.prototype.render = function () {
        return (React.createElement("div", {"className": this.getClassName(), "onClick": Action.goForward}, this.props.children));
    };
    ForwardButton.defaultProps = { className: "" };
    return ForwardButton;
})(React.Component);
exports.ForwardButton = ForwardButton;
var BackButton = (function (_super) {
    __extends(BackButton, _super);
    function BackButton(props) {
        _super.call(this, props);
        this.state = { enabled: false };
    }
    BackButton.prototype.componentDidMount = function () {
        var _this = this;
        this.backable_listener = function (backable) { return _this.setState({ enabled: backable }); };
        store_1.default.on('update-backable', this.backable_listener);
    };
    BackButton.prototype.componentWillUnmount = function () {
        if (this.backable_listener) {
            store_1.default.removeListener('update-backable', this.backable_listener);
        }
    };
    BackButton.prototype.getClassName = function () {
        if (this.state.enabled) {
            return this.props.className;
        }
        else {
            return this.props.className + " disabled";
        }
    };
    BackButton.prototype.render = function () {
        return (React.createElement("div", {"className": this.getClassName(), "onClick": Action.goBack}, this.props.children));
    };
    BackButton.defaultProps = { className: "" };
    return BackButton;
})(React.Component);
exports.BackButton = BackButton;
var EmbeddedBrowser = (function (_super) {
    __extends(EmbeddedBrowser, _super);
    function EmbeddedBrowser(props) {
        _super.call(this, props);
    }
    EmbeddedBrowser.prototype.close = function () {
        var root = React.findDOMNode(this.refs['root']);
        root.className = this.props.className + " anime-slideout";
    };
    EmbeddedBrowser.prototype.componentDidMount = function () {
        var _this = this;
        var root = React.findDOMNode(this.refs['root']);
        root.open = function (url) {
            React.findDOMNode(_this.refs['body']).open(url);
        };
    };
    EmbeddedBrowser.prototype.render = function () {
        return (React.createElement("div", {"className": this.props.className, "ref": "root"}, React.createElement("div", {"className": "title-bar"}, React.createElement(BackButton, {"className": "page-back"}, React.createElement("i", {"className": "fa fa-arrow-left"})), React.createElement(ForwardButton, {"className": "page-forward"}, React.createElement("i", {"className": "fa fa-arrow-right"})), React.createElement(PageTitle, {"className": "page-title"}), React.createElement(ExternalButton, {"className": "page-external"}, React.createElement("i", {"className": "fa fa-external-link"})), React.createElement(CloseButton, {"className": "browser-close", "onClick": this.close.bind(this)}, React.createElement("i", {"className": "fa fa-times"}))), React.createElement(BrowserBody, {"className": "page-body", "useragent": this.props.useragent, "httpreferrer": this.props.httpreferrer, "ref": "body"})));
    };
    EmbeddedBrowser.defaultProps = { className: "embedded-browser" };
    return EmbeddedBrowser;
})(React.Component);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = EmbeddedBrowser;
//# sourceMappingURL=main.js.map