var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = require('events');
var dispatcher_1 = require('./dispatcher');
var constants_1 = require('./constants');
var Store = (function (_super) {
    __extends(Store, _super);
    function Store() {
        _super.call(this);
        this.frame = null;
        this.forwardable = false;
        this.backable = false;
    }
    Store.prototype.getCurrentURL = function () {
        if (!this.frame) {
            return '';
        }
        return this.frame.getUrl();
    };
    return Store;
})(events_1.EventEmitter);
var store = new Store();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = store;
function updateForwardable(new_value) {
    if (new_value !== store.forwardable) {
        store.forwardable = new_value;
        store.emit('update-forwardable', new_value);
    }
}
function updateBackable(new_value) {
    if (new_value !== store.backable) {
        store.backable = new_value;
        store.emit('update-backable', new_value);
    }
}
function goForward() {
    if (store.frame && store.frame.canGoForward()) {
        store.frame.goForward();
    }
}
function goBack() {
    if (store.frame && store.frame.canGoBack()) {
        store.frame.goBack();
    }
}
function createFrame(frame) {
    if (store.frame) {
        console.error('Error: Only one embedded browser exists!', store.frame);
    }
    store.frame = frame;
    store.frame.addEventListener('did-finish-load', function () {
        store.emit('update-title', store.frame.getTitle());
        store.emit('update-url', store.frame.getUrl());
        updateForwardable(store.frame.canGoForward());
        updateBackable(store.frame.canGoBack());
    });
}
function openURL(url) {
    if (!url) {
        return;
    }
    store.frame.src = url;
}
store.dispatch_token = dispatcher_1.default.register(function (action) {
    switch (action.type) {
        case constants_1.ActionKind.GoForward:
            goForward();
            break;
        case constants_1.ActionKind.GoBack:
            goBack();
            break;
        case constants_1.ActionKind.CreateInnerFrame:
            createFrame(action.inner_frame);
            break;
        case constants_1.ActionKind.OpenURL:
            openURL(action.url);
            break;
        default:
            break;
    }
});
//# sourceMappingURL=store.js.map