{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponent\n */\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\n\nvar invariant = require(\"./invariant\");\n\nvar component; // This registry keeps track of the React IDs of the components that rendered to\n// `null` (in reality a placeholder such as `noscript`)\n\nvar nullComponentIDsRegistry = {};\nvar ReactEmptyComponentInjection = {\n  injectEmptyComponent: function (emptyComponent) {\n    component = ReactElement.createFactory(emptyComponent);\n  }\n};\n\nvar ReactEmptyComponentType = function () {};\n\nReactEmptyComponentType.prototype.componentDidMount = function () {\n  var internalInstance = ReactInstanceMap.get(this); // TODO: Make sure we run these methods in the correct order, we shouldn't\n  // need this check. We're going to assume if we're here it means we ran\n  // componentWillUnmount already so there is no internal instance (it gets\n  // removed as part of the unmounting process).\n\n  if (!internalInstance) {\n    return;\n  }\n\n  registerNullComponentID(internalInstance._rootNodeID);\n};\n\nReactEmptyComponentType.prototype.componentWillUnmount = function () {\n  var internalInstance = ReactInstanceMap.get(this); // TODO: Get rid of this check. See TODO in componentDidMount.\n\n  if (!internalInstance) {\n    return;\n  }\n\n  deregisterNullComponentID(internalInstance._rootNodeID);\n};\n\nReactEmptyComponentType.prototype.render = function () {\n  \"production\" !== process.env.NODE_ENV ? invariant(component, 'Trying to return null from a render, but no null placeholder component ' + 'was injected.') : invariant(component);\n  return component();\n};\n\nvar emptyElement = ReactElement.createElement(ReactEmptyComponentType);\n/**\n * Mark the component as having rendered to null.\n * @param {string} id Component's `_rootNodeID`.\n */\n\nfunction registerNullComponentID(id) {\n  nullComponentIDsRegistry[id] = true;\n}\n/**\n * Unmark the component as having rendered to null: it renders to something now.\n * @param {string} id Component's `_rootNodeID`.\n */\n\n\nfunction deregisterNullComponentID(id) {\n  delete nullComponentIDsRegistry[id];\n}\n/**\n * @param {string} id Component's `_rootNodeID`.\n * @return {boolean} True if the component is rendered to null.\n */\n\n\nfunction isNullComponentID(id) {\n  return !!nullComponentIDsRegistry[id];\n}\n\nvar ReactEmptyComponent = {\n  emptyElement: emptyElement,\n  injection: ReactEmptyComponentInjection,\n  isNullComponentID: isNullComponentID\n};\nmodule.exports = ReactEmptyComponent;","map":null,"metadata":{},"sourceType":"script"}